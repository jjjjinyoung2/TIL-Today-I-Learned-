function fibonacci(n) {
  //문제 : 아래와 같이 정의된 피보나치 수열 중 n번째 항의 수를 리턴해야 합니다.
  //0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1입니다. 그 다음 2번째 피보나치 수부터는 바로 직전의 두 피보나치 수의 합으로 정의합니다.
  //0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...
  //입력 : 인자 1 : n / number 타입의 n (n은 0 이상의 정수)
  //출력 : number 타입을 리턴해야합니다.
  //주의사항 : 재귀함수를 이용해 구현해야 합니다. / 반복문(for, while) 사용은 금지됩니다. / 함수 fibonacci가 반드시 재귀함수일 필요는 없습니다.

  // TODO: 여기에 코드를 작성합니다.
  // fibonacci === (n-1)+(n-2)
  // 직전의 수와 그 전의 수를 더하면 현재의 수가 나온다.
  // 재귀를 사용해서 이전 수를 구해야한다.
  // 재귀를 멈출 base case 작성해야한다.
  // 피보나치의 0번째는 0 1번째는 1
  let base = [0, 1];
  let result = (n) => {
    if (base[n] !== undefined) {
      //재귀멈춤
      return base[n];
    }
    base[n] = result(n - 1) + result(n - 2);
    return base[n]; //재귀로 추가된 base의 n번째 값
  };
  return result(n); //재귀로 n번 result 실행
}
// 피보나치수열을 구하는 효율적인 알고리즘 (O(N))이 존재한다.
